{
  "name": "readline-sync",
  "version": "0.8.0",
  "title": "readlineSync",
  "description": "Synchronous Readline for interactively running to have a conversation with the user via a console(TTY).",
  "keywords": [
    "readline",
    "synchronous",
    "prompt",
    "question",
    "password",
    "keyboard",
    "wait",
    "block"
  ],
  "main": "./lib/readline-sync.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/anseki/readline-sync",
  "repository": {
    "type": "git",
    "url": "git://github.com/anseki/readline-sync.git"
  },
  "bugs": {
    "url": "https://github.com/anseki/readline-sync/issues"
  },
  "licenses": "MIT",
  "author": {
    "name": "anseki",
    "url": "https://github.com/anseki"
  },
  "readme": "# readlineSync\n\nSynchronous [Readline](http://nodejs.org/api/readline.html) for interactively running to have a conversation with the user via a console(TTY).\n\n## Example\n\n```js\nvar readlineSync = require('readline-sync');\n\nvar userName = readlineSync.question('May I have your name? :'); // Wait for user's response.\nvar favFood = readlineSync.question('Hi ' + userName + '! What is your favorite food? :');\n\nconsole.log('Oh, ' + userName + ' likes ' + favFood + '!');\n```\n\n```\nMay I have your name? :AnSeki\nHi AnSeki! What is your favorite food? :chocolate\nOh, AnSeki likes chocolate!\n```\n\n## Installation\n\n```\nnpm install readline-sync\n```\n\n## Methods\n\n### question\n\n```js\nanswer = readlineSync.question([query[, options]])\n```\n\nDisplay the `query` to the user, and then return the user's response after it has been typed and Enter key was pressed.  \nYou can specify `options` (see [Options](#options)). **If the user inputs the secret text (e.g. password), you should consider `noEchoBack` option.**\n\nThe `query` may be string, or may not be (e.g. number, Date, Object, etc.). This is converted to string (i.e. `toString` method is called) before it is displayed.\n\n### prompt\n\n```js\ninput = readlineSync.prompt([options])\n```\n\nDisplay the current prompt (See `setPrompt` method) to the user, and then return the user's response after it has been typed and Enter key was pressed.  \nYou can specify `options` (see [Options](#options)). **If the user inputs the secret text (e.g. password), you should consider `noEchoBack` option.**\n\n### setPrompt\n\n```js\ncurrentPrompt = readlineSync.setPrompt([newPrompt])\n```\n\nSet the prompt, for example when you run `node` on the command line, you see `> `, which is node's prompt. The default is `'> '`. (See `prompt` method)\n\nThe `newPrompt` may be string, or may not be (e.g. number, Date, Object, etc.). This is converted to string (i.e. `toString` method is called) before it is displayed every time.\n\nFor example, `[foo-directory]#` like a bash shell that show the current directory.\n\n```js\n// Simple Object that has toString method.\nreadlineSync.setPrompt({\n  toString: function() {\n    return '[' + require('path').basename(process.cwd()) + ']# '; // Get and show current directory.\n  }\n})\n```\n\n### setPrint\n\n```js\nreadlineSync.setPrint([callback])\n```\n\nThe specified `callback` Function is called when any outputs (`prompt` method and `question` method) are done. The `callback` is given two arguments the output text and `encoding`.\n\nFor example:\n\n* This is used to pass plain texts to the Logger, when texts are colored.\n\n![sample](cl_01.png)\n\n```js\nvar readlineSync = require('readline-sync'),\n  chalk = require('chalk'),\n  user, pw, command;\n\nreadlineSync.setPrint(function(display, encoding) {\n  logger.log(chalk.stripColor(display)); // Remove control characters.\n});\n\nconsole.log(chalk.black.bold.bgYellow('    Your Account    '));\nuser = readlineSync.question(chalk.gray.underline(' USER NAME ') + ' :');\npw = readlineSync.question(chalk.gray.underline(' PASSWORD  ') + ' :', {noEchoBack: true});\n// Authorization ...\nconsole.log(chalk.green('Welcome, ' + user + '!'));\n\nreadlineSync.setPrompt(chalk.red.bold('> '));\ncommand = readlineSync.prompt();\n```\n\n* When you do the redirecting that like `node yourscript.js > foo.log` to record into a file, this is used to output conversation to the file. That is, the conversation isn't outputted to `foo.log` without this code.\n\n```js\nvar readlineSync = require('readline-sync');\nreadlineSync.setPrint(function(display, encoding) {\n  console.log(display); // Output to STDOUT (foo.log)\n});\n```\n\n### setMask\n\n```js\ncurrentMask = readlineSync.setMask([newMask])\n```\n\nSet the mask character that is shown instead of the secret text (e.g. password). (See `noEchoBack` option.) The default is `'*'`. If you want to show nothing, specify `''`. (But it's not user friendly.)  \n*Note:* The some platforms might use `'*'` or `''` always.\n\nFor example:\n\n```js\nvar readlineSync = require('readline-sync'),\n  chalk = require('chalk'),\n  secret;\n\nreadlineSync.setMask(chalk.magenta('\\u2665'));\nsecret = readlineSync.question('Please whisper sweet words :', {noEchoBack: true});\n```\n\n![sample](cl_02.png)\n\n### setBufferSize\n\n```js\ncurrentBufferSize = readlineSync.setBufferSize([newBufferSize])\n```\n\nWhen readlineSync reads from TTY directly (without reading by shell), a size `newBufferSize` buffer is used. Even if the user's response exceeds it, it's usually no problem, because the buffer is used repeatedly. But, some platforms's TTY might not accept user's response that exceeds it. And set an enough size. The default is `1024`.\n\n### setEncoding\n\n```js\ncurrentEncoding = readlineSync.setEncoding([newEncoding])\n```\n\nSet the encoding method of input (user's response) and output (`prompt` method and `question` method). The default is `'utf8'`.\n\n## Options\n\nAn `options` Object can be specified to `prompt` method and `question` method. This Object can have following properties.\n\n### noEchoBack\n\nType: Boolean  \nDefault: `false`\n\nIf `true` is specified, echo back is avoided. It is used to hide the secret text (e.g. password) which is typed by user on screen. (See `setMask` method)\n\nFor example:\n\n```js\npassword = readlineSync.question('PASSWORD :', {noEchoBack: true});\nconsole.log('Login ...');\n```\n\nThe typed text is not shown on screen.\n\n```\nPASSWORD :********\nLogin ...\n```\n\n### noTrim\n\nType: Boolean  \nDefault: `false`\n\nBy default, the leading and trailing white spaces are removed from typed text. If `true` is specified, those are not removed.\n\n## With Task Runner\n\nThe easy way to control the flow of task runner by the user's response:\n* [Grunt](http://gruntjs.com/) plugin: [grunt-confirm](https://github.com/anseki/grunt-confirm)\n* [gulp](http://gulpjs.com/) plugin: [gulp-confirm](https://github.com/anseki/gulp-confirm)\n\nIf you want to control the flow of task runner (e.g. [Grunt](http://gruntjs.com/)), call readlineSync in a task callback that is called by task runner. Then the flow of tasks is paused and it is controlled by user.\n\nExample: by using [grunt-task-helper](https://github.com/anseki/grunt-task-helper)\n\n```shell\n$ grunt\nRunning \"fileCopy\" task\nFiles already exist:\n  file-a.png\n  file-b.js\nOverwrite? (y/n) :y\nfile-a.png copied.\nfile-b.js copied.\nDone.\n```\n\n`Gruntfile.js`\n\n```js\ngrunt.initConfig({\n  taskHelper: {\n    fileCopy: {\n      options: {\n        handlerByTask: function() {\n          // Abort the task if user don't want.\n          return readlineSync.question('Overwrite? (y/n) :')\n            .toLowerCase() === 'y';\n          // Or process.exit()\n        },\n        filesArray: []\n      },\n      ...\n    }\n  },\n  copy: {\n    fileCopy: {\n      files: '<%= taskHelper.fileCopy.options.filesArray %>'\n    }\n  }\n});\n```\n\n## Note\n\n### Platforms\n\nThe TTY interfaces are different by platforms. If the platform doesn't support interactively reading from TTY, an error is thrown.\n\n```js\ntry {\n  answer = readlineSync.question('What is your favorite food? :');\n} catch (e) {\n  console.error(e);\n  process.exit(1);\n}\n```\n\n### Reading by shell\n\nreadlineSync tries reading from TTY by shell if it is needed. And if the running Node doesn't support the [Synchronous Process Execution](http://nodejs.org/api/child_process.html#child_process_synchronous_process_creation) (i.e. Node v0.10-), it uses \"piping via files\" for synchronous running.  \nAs everyone knows, \"piping via files\" is no good. It blocks the event loop and a process. It may make your script be slow.\n\nWhy did I choose it? :\n\n+ The good modules (native addon) for synchronous execution exist. But node-gyp can't compile those in some platforms or Node versions.\n+ I think that the security is important more than the speed. Some modules have problem about security. (Those don't protect data.) I think that the speed is not needed usually, because readlineSync is used while user types keys.\n\n## Release History\n * 2015-02-22           v0.6.0          Add `setBufferSize()`.\n * 2015-02-12           v0.5.5          Support the Synchronous Process Execution of Node v0.12(v0.11).\n * 2015-01-27           v0.5.0          Add `options.noTrim`.\n * 2014-07-12           v0.4.0          Add `options.noEchoBack`.\n * 2014-07-12           v0.3.0          Add `setPrint()`.\n * 2013-08-30           v0.2.0          Rewrite exporting methods.\n * 2013-08-29           v0.1.0          Initial release.\n",
  "readmeFilename": "README.md",
  "_id": "readline-sync@0.8.0",
  "_from": "readline-sync@"
}
